Index: out.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\"/>\n    <title>Test Report</title>\n    <link href=\"assets/style.css\" rel=\"stylesheet\" type=\"text/css\"/></head>\n  <body onLoad=\"init()\">\n    <script>/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\nfunction toArray(iter) {\n    if (iter === null) {\n        return null;\n    }\n    return Array.prototype.slice.call(iter);\n}\n\nfunction find(selector, elem) { // eslint-disable-line no-redeclare\n    if (!elem) {\n        elem = document;\n    }\n    return elem.querySelector(selector);\n}\n\nfunction findAll(selector, elem) {\n    if (!elem) {\n        elem = document;\n    }\n    return toArray(elem.querySelectorAll(selector));\n}\n\nfunction sortColumn(elem) {\n    toggleSortStates(elem);\n    const colIndex = toArray(elem.parentNode.childNodes).indexOf(elem);\n    let key;\n    if (elem.classList.contains('result')) {\n        key = keyResult;\n    } else if (elem.classList.contains('links')) {\n        key = keyLink;\n    } else {\n        key = keyAlpha;\n    }\n    sortTable(elem, key(colIndex));\n}\n\nfunction showAllExtras() { // eslint-disable-line no-unused-vars\n    findAll('.col-result').forEach(showExtras);\n}\n\nfunction hideAllExtras() { // eslint-disable-line no-unused-vars\n    findAll('.col-result').forEach(hideExtras);\n}\n\nfunction showExtras(colresultElem) {\n    const extras = colresultElem.parentNode.nextElementSibling;\n    const expandcollapse = colresultElem.firstElementChild;\n    extras.classList.remove('collapsed');\n    expandcollapse.classList.remove('expander');\n    expandcollapse.classList.add('collapser');\n}\n\nfunction hideExtras(colresultElem) {\n    const extras = colresultElem.parentNode.nextElementSibling;\n    const expandcollapse = colresultElem.firstElementChild;\n    extras.classList.add('collapsed');\n    expandcollapse.classList.remove('collapser');\n    expandcollapse.classList.add('expander');\n}\n\nfunction showFilters() {\n    const filterItems = document.getElementsByClassName('filter');\n    for (let i = 0; i < filterItems.length; i++)\n        filterItems[i].hidden = false;\n}\n\nfunction addCollapse() {\n    // Add links for show/hide all\n    const resulttable = find('table#results-table');\n    const showhideall = document.createElement('p');\n    showhideall.innerHTML = '<a href=\"javascript:showAllExtras()\">Show all details</a> / ' +\n                            '<a href=\"javascript:hideAllExtras()\">Hide all details</a>';\n    resulttable.parentElement.insertBefore(showhideall, resulttable);\n\n    // Add show/hide link to each result\n    findAll('.col-result').forEach(function(elem) {\n        const collapsed = getQueryParameter('collapsed') || 'Passed';\n        const extras = elem.parentNode.nextElementSibling;\n        const expandcollapse = document.createElement('span');\n        if (extras.classList.contains('collapsed')) {\n            expandcollapse.classList.add('expander');\n        } else if (collapsed.includes(elem.innerHTML)) {\n            extras.classList.add('collapsed');\n            expandcollapse.classList.add('expander');\n        } else {\n            expandcollapse.classList.add('collapser');\n        }\n        elem.appendChild(expandcollapse);\n\n        elem.addEventListener('click', function(event) {\n            if (event.currentTarget.parentNode.nextElementSibling.classList.contains('collapsed')) {\n                showExtras(event.currentTarget);\n            } else {\n                hideExtras(event.currentTarget);\n            }\n        });\n    });\n}\n\nfunction getQueryParameter(name) {\n    const match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\n\nfunction init () { // eslint-disable-line no-unused-vars\n    resetSortHeaders();\n\n    addCollapse();\n\n    showFilters();\n\n    sortColumn(find('.initial-sort'));\n\n    findAll('.sortable').forEach(function(elem) {\n        elem.addEventListener('click',\n            function() {\n                sortColumn(elem);\n            }, false);\n    });\n}\n\nfunction sortTable(clicked, keyFunc) {\n    const rows = findAll('.results-table-row');\n    const reversed = !clicked.classList.contains('asc');\n    const sortedRows = sort(rows, keyFunc, reversed);\n    /* Whole table is removed here because browsers acts much slower\n     * when appending existing elements.\n     */\n    const thead = document.getElementById('results-table-head');\n    document.getElementById('results-table').remove();\n    const parent = document.createElement('table');\n    parent.id = 'results-table';\n    parent.appendChild(thead);\n    sortedRows.forEach(function(elem) {\n        parent.appendChild(elem);\n    });\n    document.getElementsByTagName('BODY')[0].appendChild(parent);\n}\n\nfunction sort(items, keyFunc, reversed) {\n    const sortArray = items.map(function(item, i) {\n        return [keyFunc(item), i];\n    });\n\n    sortArray.sort(function(a, b) {\n        const keyA = a[0];\n        const keyB = b[0];\n\n        if (keyA == keyB) return 0;\n\n        if (reversed) {\n            return keyA < keyB ? 1 : -1;\n        } else {\n            return keyA > keyB ? 1 : -1;\n        }\n    });\n\n    return sortArray.map(function(item) {\n        const index = item[1];\n        return items[index];\n    });\n}\n\nfunction keyAlpha(colIndex) {\n    return function(elem) {\n        return elem.childNodes[1].childNodes[colIndex].firstChild.data.toLowerCase();\n    };\n}\n\nfunction keyLink(colIndex) {\n    return function(elem) {\n        const dataCell = elem.childNodes[1].childNodes[colIndex].firstChild;\n        return dataCell == null ? '' : dataCell.innerText.toLowerCase();\n    };\n}\n\nfunction keyResult(colIndex) {\n    return function(elem) {\n        const strings = ['Error', 'Failed', 'Rerun', 'XFailed', 'XPassed',\n            'Skipped', 'Passed'];\n        return strings.indexOf(elem.childNodes[1].childNodes[colIndex].firstChild.data);\n    };\n}\n\nfunction resetSortHeaders() {\n    findAll('.sort-icon').forEach(function(elem) {\n        elem.parentNode.removeChild(elem);\n    });\n    findAll('.sortable').forEach(function(elem) {\n        const icon = document.createElement('div');\n        icon.className = 'sort-icon';\n        icon.textContent = 'vvv';\n        elem.insertBefore(icon, elem.firstChild);\n        elem.classList.remove('desc', 'active');\n        elem.classList.add('asc', 'inactive');\n    });\n}\n\nfunction toggleSortStates(elem) {\n    //if active, toggle between asc and desc\n    if (elem.classList.contains('active')) {\n        elem.classList.toggle('asc');\n        elem.classList.toggle('desc');\n    }\n\n    //if inactive, reset all other functions and add ascending active\n    if (elem.classList.contains('inactive')) {\n        resetSortHeaders();\n        elem.classList.remove('inactive');\n        elem.classList.add('active');\n    }\n}\n\nfunction isAllRowsHidden(value) {\n    return value.hidden == false;\n}\n\nfunction filterTable(elem) { // eslint-disable-line no-unused-vars\n    const outcomeAtt = 'data-test-result';\n    const outcome = elem.getAttribute(outcomeAtt);\n    const classOutcome = outcome + ' results-table-row';\n    const outcomeRows = document.getElementsByClassName(classOutcome);\n\n    for(let i = 0; i < outcomeRows.length; i++){\n        outcomeRows[i].hidden = !elem.checked;\n    }\n\n    const rows = findAll('.results-table-row').filter(isAllRowsHidden);\n    const allRowsHidden = rows.length == 0 ? true : false;\n    const notFoundMessage = document.getElementById('not-found-message');\n    notFoundMessage.hidden = !allRowsHidden;\n}\n</script>\n    <h1>out.html</h1>\n    <p>Report generated on 20-Apr-2021 at 21:38:51 by <a href=\"https://pypi.python.org/pypi/pytest-html\">pytest-html</a> v3.1.1</p>\n    <h2>Environment</h2>\n    <table id=\"environment\">\n      <tr>\n        <td>Packages</td>\n        <td>{\"pluggy\": \"0.13.1\", \"py\": \"1.10.0\", \"pytest\": \"6.2.2\"}</td></tr>\n      <tr>\n        <td>Platform</td>\n        <td>Linux-5.8.0-49-generic-x86_64-with-glibc2.29</td></tr>\n      <tr>\n        <td>Plugins</td>\n        <td>{\"html\": \"3.1.1\", \"metadata\": \"1.11.0\"}</td></tr>\n      <tr>\n        <td>Python</td>\n        <td>3.8.5</td></tr></table>\n    <h2>Summary</h2>\n    <p>8 tests ran in 118.07 seconds. </p>\n    <p class=\"filter\" hidden=\"true\">(Un)check the boxes to filter the results.</p><input checked=\"true\" class=\"filter\" data-test-result=\"passed\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"passed\">3 passed</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"skipped\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"skipped\">0 skipped</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"failed\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"failed\">5 failed</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"error\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"error\">0 errors</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"xfailed\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"xfailed\">0 expected failures</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"xpassed\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"xpassed\">0 unexpected passes</span>\n    <h2>Results</h2>\n    <table id=\"results-table\">\n      <thead id=\"results-table-head\">\n        <tr>\n          <th class=\"sortable result initial-sort\" col=\"result\">Result</th>\n          <th class=\"sortable\" col=\"name\">Test</th>\n          <th class=\"sortable\" col=\"duration\">Duration</th>\n          <th class=\"sortable links\" col=\"links\">Links</th></tr>\n        <tr hidden=\"true\" id=\"not-found-message\">\n          <th colspan=\"4\">No results found. Try to check the filters</th></tr></thead>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">tests/testing_cart.py::TesCART::test_ZipCode</td>\n          <td class=\"col-duration\">16.74</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_ZipCode&gt;<br/><br/>    def test_ZipCode(self):<br/>    <br/>        self.cart_page.zip(&quot;54000&quot;)<br/>&gt;       self.cart_page.submit_zip()<br/><br/>tests/testing_cart.py:33: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:24: in submit_zip<br/>    self.click(MiniCart.submit_zip)<br/>resources/page_objects/base_page.py:115: in click<br/>    WebDriverWait(self.driver, self.wait).until(EC.element_to_be_clickable(by_locator)).click()<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:80: in click<br/>    self._execute(Command.CLICK_ELEMENT)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:633: in _execute<br/>    return self._parent.execute(command, params)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:321: in execute<br/>    self.error_handler.check_response(response)<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f33977efe80&gt;<br/>response = {&#x27;status&#x27;: 400, &#x27;value&#x27;: &#x27;{&quot;value&quot;:{&quot;error&quot;:&quot;element click intercepted&quot;,&quot;message&quot;:&quot;element click intercepted: Element ... at point (1015, -165)\\\\n  (Session info: chrome=89.0.4389.90)&quot;,&quot;stacktrace&quot;:&quot;#0 0x559b0915c2b9 \\\\u003Cunknown&gt;\\\\n&quot;}}&#x27;}<br/><br/>    def check_response(self, response):<br/>        &quot;&quot;&quot;<br/>        Checks that a JSON response from the WebDriver does not have an error.<br/>    <br/>        :Args:<br/>         - response - The JSON response from the WebDriver server as a dictionary<br/>           object.<br/>    <br/>        :Raises: If the response contains an error message.<br/>        &quot;&quot;&quot;<br/>        status = response.get(&#x27;status&#x27;, None)<br/>        if status is None or status == ErrorCode.SUCCESS:<br/>            return<br/>        value = None<br/>        message = response.get(&quot;message&quot;, &quot;&quot;)<br/>        screen = response.get(&quot;screen&quot;, &quot;&quot;)<br/>        stacktrace = None<br/>        if isinstance(status, int):<br/>            value_json = response.get(&#x27;value&#x27;, None)<br/>            if value_json and isinstance(value_json, basestring):<br/>                import json<br/>                try:<br/>                    value = json.loads(value_json)<br/>                    if len(value.keys()) == 1:<br/>                        value = value[&#x27;value&#x27;]<br/>                    status = value.get(&#x27;error&#x27;, None)<br/>                    if status is None:<br/>                        status = value[&quot;status&quot;]<br/>                        message = value[&quot;value&quot;]<br/>                        if not isinstance(message, basestring):<br/>                            value = message<br/>                            message = message.get(&#x27;message&#x27;)<br/>                    else:<br/>                        message = value.get(&#x27;message&#x27;, None)<br/>                except ValueError:<br/>                    pass<br/>    <br/>        exception_class = ErrorInResponseException<br/>        if status in ErrorCode.NO_SUCH_ELEMENT:<br/>            exception_class = NoSuchElementException<br/>        elif status in ErrorCode.NO_SUCH_FRAME:<br/>            exception_class = NoSuchFrameException<br/>        elif status in ErrorCode.NO_SUCH_WINDOW:<br/>            exception_class = NoSuchWindowException<br/>        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:<br/>            exception_class = StaleElementReferenceException<br/>        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:<br/>            exception_class = ElementNotVisibleException<br/>        elif status in ErrorCode.INVALID_ELEMENT_STATE:<br/>            exception_class = InvalidElementStateException<br/>        elif status in ErrorCode.INVALID_SELECTOR \\<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR \\<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:<br/>            exception_class = InvalidSelectorException<br/>        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:<br/>            exception_class = ElementNotSelectableException<br/>        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:<br/>            exception_class = ElementNotInteractableException<br/>        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:<br/>            exception_class = InvalidCookieDomainException<br/>        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:<br/>            exception_class = UnableToSetCookieException<br/>        elif status in ErrorCode.TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.SCRIPT_TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.UNKNOWN_ERROR:<br/>            exception_class = WebDriverException<br/>        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:<br/>            exception_class = UnexpectedAlertPresentException<br/>        elif status in ErrorCode.NO_ALERT_OPEN:<br/>            exception_class = NoAlertPresentException<br/>        elif status in ErrorCode.IME_NOT_AVAILABLE:<br/>            exception_class = ImeNotAvailableException<br/>        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:<br/>            exception_class = ImeActivationFailedException<br/>        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:<br/>            exception_class = MoveTargetOutOfBoundsException<br/>        elif status in ErrorCode.JAVASCRIPT_ERROR:<br/>            exception_class = JavascriptException<br/>        elif status in ErrorCode.SESSION_NOT_CREATED:<br/>            exception_class = SessionNotCreatedException<br/>        elif status in ErrorCode.INVALID_ARGUMENT:<br/>            exception_class = InvalidArgumentException<br/>        elif status in ErrorCode.NO_SUCH_COOKIE:<br/>            exception_class = NoSuchCookieException<br/>        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:<br/>            exception_class = ScreenshotException<br/>        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:<br/>            exception_class = ElementClickInterceptedException<br/>        elif status in ErrorCode.INSECURE_CERTIFICATE:<br/>            exception_class = InsecureCertificateException<br/>        elif status in ErrorCode.INVALID_COORDINATES:<br/>            exception_class = InvalidCoordinatesException<br/>        elif status in ErrorCode.INVALID_SESSION_ID:<br/>            exception_class = InvalidSessionIdException<br/>        elif status in ErrorCode.UNKNOWN_METHOD:<br/>            exception_class = UnknownMethodException<br/>        else:<br/>            exception_class = WebDriverException<br/>        if value == &#x27;&#x27; or value is None:<br/>            value = response[&#x27;value&#x27;]<br/>        if isinstance(value, basestring):<br/>            if exception_class == ErrorInResponseException:<br/>                raise exception_class(response, value)<br/>            raise exception_class(value)<br/>        if message == &quot;&quot; and &#x27;message&#x27; in value:<br/>            message = value[&#x27;message&#x27;]<br/>    <br/>        screen = None<br/>        if &#x27;screen&#x27; in value:<br/>            screen = value[&#x27;screen&#x27;]<br/>    <br/>        stacktrace = None<br/>        if &#x27;stackTrace&#x27; in value and value[&#x27;stackTrace&#x27;]:<br/>            stacktrace = []<br/>            try:<br/>                for frame in value[&#x27;stackTrace&#x27;]:<br/>                    line = self._value_or_default(frame, &#x27;lineNumber&#x27;, &#x27;&#x27;)<br/>                    file = self._value_or_default(frame, &#x27;fileName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if line:<br/>                        file = &quot;%s:%s&quot; % (file, line)<br/>                    meth = self._value_or_default(frame, &#x27;methodName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if &#x27;className&#x27; in frame:<br/>                        meth = &quot;%s.%s&quot; % (frame[&#x27;className&#x27;], meth)<br/>                    msg = &quot;    at %s (%s)&quot;<br/>                    msg = msg % (meth, file)<br/>                    stacktrace.append(msg)<br/>            except TypeError:<br/>                pass<br/>        if exception_class == ErrorInResponseException:<br/>            raise exception_class(response, message)<br/>        elif exception_class == UnexpectedAlertPresentException:<br/>            alert_text = None<br/>            if &#x27;data&#x27; in value:<br/>                alert_text = value[&#x27;data&#x27;].get(&#x27;text&#x27;)<br/>            elif &#x27;alert&#x27; in value:<br/>                alert_text = value[&#x27;alert&#x27;].get(&#x27;text&#x27;)<br/>            raise exception_class(message, screen, stacktrace, alert_text)<br/>&gt;       raise exception_class(message, screen, stacktrace)<br/><span class=\"error\">E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1015, -165)</span><br/><span class=\"error\">E         (Session info: chrome=89.0.4389.90)</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException<br/> ------------------------------Captured stdout call------------------------------ <br/>screenshots/screenshot_04-20_21-37-09.png\n<br/></div></td></tr></tbody>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">tests/testing_cart.py::TesCART::test_click_ProceedCheckOut</td>\n          <td class=\"col-duration\">21.10</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_click_ProceedCheckOut&gt;<br/><br/>    def test_click_ProceedCheckOut(self):<br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:36: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f339768cca0&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \\<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class=\"error\">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@\nscreenshots/screenshot_04-20_21-37-30.png\n<br/></div></td></tr></tbody>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">tests/testing_cart.py::TesCART::test_countItemAndPriceOfItem</td>\n          <td class=\"col-duration\">21.03</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_countItemAndPriceOfItem&gt;<br/><br/>    def test_countItemAndPriceOfItem(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:46: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f33976282b0&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \\<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class=\"error\">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@\nscreenshots/screenshot_04-20_21-37-51.png\n<br/></div></td></tr></tbody>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">tests/testing_cart.py::TesCART::test_imageAndItemQuantity</td>\n          <td class=\"col-duration\">20.60</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_imageAndItemQuantity&gt;<br/><br/>    def test_imageAndItemQuantity(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:54: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f3397632b80&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \\<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class=\"error\">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@\nscreenshots/screenshot_04-20_21-38-12.png\n<br/></div></td></tr></tbody>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">tests/testing_cart.py::TesCART::test_name_of_itemAndMinOrder</td>\n          <td class=\"col-duration\">20.96</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_name_of_itemAndMinOrder&gt;<br/><br/>    def test_name_of_itemAndMinOrder(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:63: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f3397753c40&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \\<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class=\"error\">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@\nscreenshots/screenshot_04-20_21-38-33.png\n<br/> -----------------------------Captured log teardown------------------------------ <br/>WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f3397787640&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f\nWARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f33977596d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f\nWARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f3397632100&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f<br/></div></td></tr></tbody>\n      <tbody class=\"passed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Passed</td>\n          <td class=\"col-name\">tests/testing_forgotpassword.py::TesFP::test_ForgetPassword</td>\n          <td class=\"col-duration\">16.86</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\"> ------------------------------Captured stdout call------------------------------ <br/>Password reset successfully\nEmail ID does not exist, please try again with a valid ID&lt;br&gt;\n<br/></div></td></tr></tbody>\n      <tbody class=\"passed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Passed</td>\n          <td class=\"col-name\">tests/testing_forgotpassword.py::TesFP::test_headings</td>\n          <td class=\"col-duration\">0.09</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\"> ------------------------------Captured stdout call------------------------------ <br/>{&#x27;forgot password&#x27;: True, &#x27;why register with us.&#x27;: True}\n<br/></div></td></tr></tbody>\n      <tbody class=\"passed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Passed</td>\n          <td class=\"col-name\">tests/testing_forgotpassword.py::TesFP::test_placeholders</td>\n          <td class=\"col-duration\">0.20</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"log\"> ------------------------------Captured stdout call------------------------------ <br/>{&#x27;Enter your registered Email Id&#x27;: True}\n<br/> -----------------------------Captured log teardown------------------------------ <br/>WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763a9a0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64\nWARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763a640&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64\nWARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763adf0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64<br/></div></td></tr></tbody></table></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out.html b/out.html
--- a/out.html	(revision 0359f1f8257d89a1071457f76be0294d40a2faa7)
+++ b/out.html	(date 1619008639314)
@@ -243,7 +243,7 @@
 }
 </script>
     <h1>out.html</h1>
-    <p>Report generated on 20-Apr-2021 at 21:38:51 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a> v3.1.1</p>
+    <p>Report generated on 21-Apr-2021 at 17:37:19 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a> v3.1.1</p>
     <h2>Environment</h2>
     <table id="environment">
       <tr>
@@ -259,8 +259,8 @@
         <td>Python</td>
         <td>3.8.5</td></tr></table>
     <h2>Summary</h2>
-    <p>8 tests ran in 118.07 seconds. </p>
-    <p class="filter" hidden="true">(Un)check the boxes to filter the results.</p><input checked="true" class="filter" data-test-result="passed" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="passed">3 passed</span>, <input checked="true" class="filter" data-test-result="skipped" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="skipped">0 skipped</span>, <input checked="true" class="filter" data-test-result="failed" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="failed">5 failed</span>, <input checked="true" class="filter" data-test-result="error" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="error">0 errors</span>, <input checked="true" class="filter" data-test-result="xfailed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xfailed">0 expected failures</span>, <input checked="true" class="filter" data-test-result="xpassed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xpassed">0 unexpected passes</span>
+    <p>3 tests ran in 67.35 seconds. </p>
+    <p class="filter" hidden="true">(Un)check the boxes to filter the results.</p><input checked="true" class="filter" data-test-result="passed" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="passed">1 passed</span>, <input checked="true" class="filter" data-test-result="skipped" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="skipped">0 skipped</span>, <input checked="true" class="filter" data-test-result="failed" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="failed">2 failed</span>, <input checked="true" class="filter" data-test-result="error" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="error">0 errors</span>, <input checked="true" class="filter" data-test-result="xfailed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xfailed">0 expected failures</span>, <input checked="true" class="filter" data-test-result="xpassed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xpassed">0 unexpected passes</span>
     <h2>Results</h2>
     <table id="results-table">
       <thead id="results-table-head">
@@ -274,89 +274,32 @@
       <tbody class="failed results-table-row">
         <tr>
           <td class="col-result">Failed</td>
-          <td class="col-name">tests/testing_cart.py::TesCART::test_ZipCode</td>
-          <td class="col-duration">16.74</td>
-          <td class="col-links"></td></tr>
-        <tr>
-          <td class="extra" colspan="4">
-            <div class="log">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_ZipCode&gt;<br/><br/>    def test_ZipCode(self):<br/>    <br/>        self.cart_page.zip(&quot;54000&quot;)<br/>&gt;       self.cart_page.submit_zip()<br/><br/>tests/testing_cart.py:33: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:24: in submit_zip<br/>    self.click(MiniCart.submit_zip)<br/>resources/page_objects/base_page.py:115: in click<br/>    WebDriverWait(self.driver, self.wait).until(EC.element_to_be_clickable(by_locator)).click()<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:80: in click<br/>    self._execute(Command.CLICK_ELEMENT)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:633: in _execute<br/>    return self._parent.execute(command, params)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:321: in execute<br/>    self.error_handler.check_response(response)<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f33977efe80&gt;<br/>response = {&#x27;status&#x27;: 400, &#x27;value&#x27;: &#x27;{&quot;value&quot;:{&quot;error&quot;:&quot;element click intercepted&quot;,&quot;message&quot;:&quot;element click intercepted: Element ... at point (1015, -165)\\n  (Session info: chrome=89.0.4389.90)&quot;,&quot;stacktrace&quot;:&quot;#0 0x559b0915c2b9 \\u003Cunknown&gt;\\n&quot;}}&#x27;}<br/><br/>    def check_response(self, response):<br/>        &quot;&quot;&quot;<br/>        Checks that a JSON response from the WebDriver does not have an error.<br/>    <br/>        :Args:<br/>         - response - The JSON response from the WebDriver server as a dictionary<br/>           object.<br/>    <br/>        :Raises: If the response contains an error message.<br/>        &quot;&quot;&quot;<br/>        status = response.get(&#x27;status&#x27;, None)<br/>        if status is None or status == ErrorCode.SUCCESS:<br/>            return<br/>        value = None<br/>        message = response.get(&quot;message&quot;, &quot;&quot;)<br/>        screen = response.get(&quot;screen&quot;, &quot;&quot;)<br/>        stacktrace = None<br/>        if isinstance(status, int):<br/>            value_json = response.get(&#x27;value&#x27;, None)<br/>            if value_json and isinstance(value_json, basestring):<br/>                import json<br/>                try:<br/>                    value = json.loads(value_json)<br/>                    if len(value.keys()) == 1:<br/>                        value = value[&#x27;value&#x27;]<br/>                    status = value.get(&#x27;error&#x27;, None)<br/>                    if status is None:<br/>                        status = value[&quot;status&quot;]<br/>                        message = value[&quot;value&quot;]<br/>                        if not isinstance(message, basestring):<br/>                            value = message<br/>                            message = message.get(&#x27;message&#x27;)<br/>                    else:<br/>                        message = value.get(&#x27;message&#x27;, None)<br/>                except ValueError:<br/>                    pass<br/>    <br/>        exception_class = ErrorInResponseException<br/>        if status in ErrorCode.NO_SUCH_ELEMENT:<br/>            exception_class = NoSuchElementException<br/>        elif status in ErrorCode.NO_SUCH_FRAME:<br/>            exception_class = NoSuchFrameException<br/>        elif status in ErrorCode.NO_SUCH_WINDOW:<br/>            exception_class = NoSuchWindowException<br/>        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:<br/>            exception_class = StaleElementReferenceException<br/>        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:<br/>            exception_class = ElementNotVisibleException<br/>        elif status in ErrorCode.INVALID_ELEMENT_STATE:<br/>            exception_class = InvalidElementStateException<br/>        elif status in ErrorCode.INVALID_SELECTOR \<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR \<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:<br/>            exception_class = InvalidSelectorException<br/>        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:<br/>            exception_class = ElementNotSelectableException<br/>        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:<br/>            exception_class = ElementNotInteractableException<br/>        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:<br/>            exception_class = InvalidCookieDomainException<br/>        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:<br/>            exception_class = UnableToSetCookieException<br/>        elif status in ErrorCode.TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.SCRIPT_TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.UNKNOWN_ERROR:<br/>            exception_class = WebDriverException<br/>        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:<br/>            exception_class = UnexpectedAlertPresentException<br/>        elif status in ErrorCode.NO_ALERT_OPEN:<br/>            exception_class = NoAlertPresentException<br/>        elif status in ErrorCode.IME_NOT_AVAILABLE:<br/>            exception_class = ImeNotAvailableException<br/>        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:<br/>            exception_class = ImeActivationFailedException<br/>        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:<br/>            exception_class = MoveTargetOutOfBoundsException<br/>        elif status in ErrorCode.JAVASCRIPT_ERROR:<br/>            exception_class = JavascriptException<br/>        elif status in ErrorCode.SESSION_NOT_CREATED:<br/>            exception_class = SessionNotCreatedException<br/>        elif status in ErrorCode.INVALID_ARGUMENT:<br/>            exception_class = InvalidArgumentException<br/>        elif status in ErrorCode.NO_SUCH_COOKIE:<br/>            exception_class = NoSuchCookieException<br/>        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:<br/>            exception_class = ScreenshotException<br/>        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:<br/>            exception_class = ElementClickInterceptedException<br/>        elif status in ErrorCode.INSECURE_CERTIFICATE:<br/>            exception_class = InsecureCertificateException<br/>        elif status in ErrorCode.INVALID_COORDINATES:<br/>            exception_class = InvalidCoordinatesException<br/>        elif status in ErrorCode.INVALID_SESSION_ID:<br/>            exception_class = InvalidSessionIdException<br/>        elif status in ErrorCode.UNKNOWN_METHOD:<br/>            exception_class = UnknownMethodException<br/>        else:<br/>            exception_class = WebDriverException<br/>        if value == &#x27;&#x27; or value is None:<br/>            value = response[&#x27;value&#x27;]<br/>        if isinstance(value, basestring):<br/>            if exception_class == ErrorInResponseException:<br/>                raise exception_class(response, value)<br/>            raise exception_class(value)<br/>        if message == &quot;&quot; and &#x27;message&#x27; in value:<br/>            message = value[&#x27;message&#x27;]<br/>    <br/>        screen = None<br/>        if &#x27;screen&#x27; in value:<br/>            screen = value[&#x27;screen&#x27;]<br/>    <br/>        stacktrace = None<br/>        if &#x27;stackTrace&#x27; in value and value[&#x27;stackTrace&#x27;]:<br/>            stacktrace = []<br/>            try:<br/>                for frame in value[&#x27;stackTrace&#x27;]:<br/>                    line = self._value_or_default(frame, &#x27;lineNumber&#x27;, &#x27;&#x27;)<br/>                    file = self._value_or_default(frame, &#x27;fileName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if line:<br/>                        file = &quot;%s:%s&quot; % (file, line)<br/>                    meth = self._value_or_default(frame, &#x27;methodName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if &#x27;className&#x27; in frame:<br/>                        meth = &quot;%s.%s&quot; % (frame[&#x27;className&#x27;], meth)<br/>                    msg = &quot;    at %s (%s)&quot;<br/>                    msg = msg % (meth, file)<br/>                    stacktrace.append(msg)<br/>            except TypeError:<br/>                pass<br/>        if exception_class == ErrorInResponseException:<br/>            raise exception_class(response, message)<br/>        elif exception_class == UnexpectedAlertPresentException:<br/>            alert_text = None<br/>            if &#x27;data&#x27; in value:<br/>                alert_text = value[&#x27;data&#x27;].get(&#x27;text&#x27;)<br/>            elif &#x27;alert&#x27; in value:<br/>                alert_text = value[&#x27;alert&#x27;].get(&#x27;text&#x27;)<br/>            raise exception_class(message, screen, stacktrace, alert_text)<br/>&gt;       raise exception_class(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1015, -165)</span><br/><span class="error">E         (Session info: chrome=89.0.4389.90)</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException<br/> ------------------------------Captured stdout call------------------------------ <br/>screenshots/screenshot_04-20_21-37-09.png
-<br/></div></td></tr></tbody>
-      <tbody class="failed results-table-row">
-        <tr>
-          <td class="col-result">Failed</td>
-          <td class="col-name">tests/testing_cart.py::TesCART::test_click_ProceedCheckOut</td>
-          <td class="col-duration">21.10</td>
-          <td class="col-links"></td></tr>
-        <tr>
-          <td class="extra" colspan="4">
-            <div class="log">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_click_ProceedCheckOut&gt;<br/><br/>    def test_click_ProceedCheckOut(self):<br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:36: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f339768cca0&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@
-screenshots/screenshot_04-20_21-37-30.png
-<br/></div></td></tr></tbody>
-      <tbody class="failed results-table-row">
-        <tr>
-          <td class="col-result">Failed</td>
-          <td class="col-name">tests/testing_cart.py::TesCART::test_countItemAndPriceOfItem</td>
-          <td class="col-duration">21.03</td>
+          <td class="col-name">tests/testing_MiniCart.py::TesCART::test_EmptyCart</td>
+          <td class="col-duration">51.80</td>
           <td class="col-links"></td></tr>
         <tr>
           <td class="extra" colspan="4">
-            <div class="log">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_countItemAndPriceOfItem&gt;<br/><br/>    def test_countItemAndPriceOfItem(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:46: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f33976282b0&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@
-screenshots/screenshot_04-20_21-37-51.png
+            <div class="log">self = &lt;gitAutomation.tests.testing_MiniCart.TesCART testMethod=test_EmptyCart&gt;<br/><br/>    def test_EmptyCart(self):<br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_MiniCart.py:31: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:198: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:74: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;138c6ccd04b21cba775a6ca6fa23d5a3&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f7a87533c10&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@
+screenshots/screenshot_04-21_17-37-03.png
 <br/></div></td></tr></tbody>
       <tbody class="failed results-table-row">
         <tr>
           <td class="col-result">Failed</td>
-          <td class="col-name">tests/testing_cart.py::TesCART::test_imageAndItemQuantity</td>
-          <td class="col-duration">20.60</td>
+          <td class="col-name">tests/testing_MiniCart.py::TesCART::test_click_ProceedCheckOut</td>
+          <td class="col-duration">3.01</td>
           <td class="col-links"></td></tr>
         <tr>
           <td class="extra" colspan="4">
-            <div class="log">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_imageAndItemQuantity&gt;<br/><br/>    def test_imageAndItemQuantity(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:54: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f3397632b80&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@
-screenshots/screenshot_04-20_21-38-12.png
-<br/></div></td></tr></tbody>
-      <tbody class="failed results-table-row">
-        <tr>
-          <td class="col-result">Failed</td>
-          <td class="col-name">tests/testing_cart.py::TesCART::test_name_of_itemAndMinOrder</td>
-          <td class="col-duration">20.96</td>
-          <td class="col-links"></td></tr>
-        <tr>
-          <td class="extra" colspan="4">
-            <div class="log">self = &lt;gitAutomation.tests.testing_cart.TesCART testMethod=test_name_of_itemAndMinOrder&gt;<br/><br/>    def test_name_of_itemAndMinOrder(self):<br/>    <br/>&gt;       self.cart_page.click_cart()<br/><br/>tests/testing_cart.py:63: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:28: in click_cart<br/>    self.scroll_to_element(MiniCart.click_cart)<br/>resources/page_objects/base_page.py:196: in scroll_to_element<br/>    element = self.find_element(by_locator)<br/>resources/page_objects/base_page.py:72: in find_element<br/>    WebDriverWait(self.driver, self.wait).until(EC.presence_of_element_located(by_locator))<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.support.wait.WebDriverWait (session=&quot;8f8ffb81ca106d4c68ad9630eceb1b1f&quot;)&gt;, method = &lt;selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7f3397753c40&gt;, message = &#x27;&#x27;<br/><br/>    def until(self, method, message=&#x27;&#x27;):<br/>        &quot;&quot;&quot;Calls the method provided with the driver as an argument until the \<br/>        return value is not False.&quot;&quot;&quot;<br/>        screen = None<br/>        stacktrace = None<br/>    <br/>        end_time = time.time() + self._timeout<br/>        while True:<br/>            try:<br/>                value = method(self._driver)<br/>                if value:<br/>                    return value<br/>            except self._ignored_exceptions as exc:<br/>                screen = getattr(exc, &#x27;screen&#x27;, None)<br/>                stacktrace = getattr(exc, &#x27;stacktrace&#x27;, None)<br/>            time.sleep(self._poll)<br/>            if time.time() &gt; end_time:<br/>                break<br/>&gt;       raise TimeoutException(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.TimeoutException: Message:</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException<br/> ------------------------------Captured stdout call------------------------------ <br/>@screenshot@
-screenshots/screenshot_04-20_21-38-33.png
-<br/> -----------------------------Captured log teardown------------------------------ <br/>WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f3397787640&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f
-WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f33977596d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f
-WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f3397632100&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/8f8ffb81ca106d4c68ad9630eceb1b1f<br/></div></td></tr></tbody>
+            <div class="log">self = &lt;gitAutomation.tests.testing_MiniCart.TesCART testMethod=test_click_ProceedCheckOut&gt;<br/><br/>    def test_click_ProceedCheckOut(self):<br/>        # self.cart_page.click_cart()<br/>        # empty = self.cart_page.get_attribute(MiniCart.empty_cart, &#x27;innerHTML&#x27;)<br/>        # print(empty)<br/>&gt;       self.cart_page.click_select()<br/><br/>tests/testing_MiniCart.py:39: <br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/>resources/page_objects/cart.py:35: in click_select<br/>    self.click(MiniCart.select_button)<br/>resources/page_objects/base_page.py:117: in click<br/>    WebDriverWait(self.driver, self.wait).until(EC.element_to_be_clickable(by_locator)).click()<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:80: in click<br/>    self._execute(Command.CLICK_ELEMENT)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webelement.py:633: in _execute<br/>    return self._parent.execute(command, params)<br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/webdriver.py:321: in execute<br/>    self.error_handler.check_response(response)<br/>_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ <br/><br/>self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7a874dd460&gt;<br/>response = {&#x27;status&#x27;: 400, &#x27;value&#x27;: &#x27;{&quot;value&quot;:{&quot;error&quot;:&quot;element click intercepted&quot;,&quot;message&quot;:&quot;element click intercepted: Element ...e at point (921, 1802)\\n  (Session info: chrome=89.0.4389.90)&quot;,&quot;stacktrace&quot;:&quot;#0 0x562039de82b9 \\u003Cunknown&gt;\\n&quot;}}&#x27;}<br/><br/>    def check_response(self, response):<br/>        &quot;&quot;&quot;<br/>        Checks that a JSON response from the WebDriver does not have an error.<br/>    <br/>        :Args:<br/>         - response - The JSON response from the WebDriver server as a dictionary<br/>           object.<br/>    <br/>        :Raises: If the response contains an error message.<br/>        &quot;&quot;&quot;<br/>        status = response.get(&#x27;status&#x27;, None)<br/>        if status is None or status == ErrorCode.SUCCESS:<br/>            return<br/>        value = None<br/>        message = response.get(&quot;message&quot;, &quot;&quot;)<br/>        screen = response.get(&quot;screen&quot;, &quot;&quot;)<br/>        stacktrace = None<br/>        if isinstance(status, int):<br/>            value_json = response.get(&#x27;value&#x27;, None)<br/>            if value_json and isinstance(value_json, basestring):<br/>                import json<br/>                try:<br/>                    value = json.loads(value_json)<br/>                    if len(value.keys()) == 1:<br/>                        value = value[&#x27;value&#x27;]<br/>                    status = value.get(&#x27;error&#x27;, None)<br/>                    if status is None:<br/>                        status = value[&quot;status&quot;]<br/>                        message = value[&quot;value&quot;]<br/>                        if not isinstance(message, basestring):<br/>                            value = message<br/>                            message = message.get(&#x27;message&#x27;)<br/>                    else:<br/>                        message = value.get(&#x27;message&#x27;, None)<br/>                except ValueError:<br/>                    pass<br/>    <br/>        exception_class = ErrorInResponseException<br/>        if status in ErrorCode.NO_SUCH_ELEMENT:<br/>            exception_class = NoSuchElementException<br/>        elif status in ErrorCode.NO_SUCH_FRAME:<br/>            exception_class = NoSuchFrameException<br/>        elif status in ErrorCode.NO_SUCH_WINDOW:<br/>            exception_class = NoSuchWindowException<br/>        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:<br/>            exception_class = StaleElementReferenceException<br/>        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:<br/>            exception_class = ElementNotVisibleException<br/>        elif status in ErrorCode.INVALID_ELEMENT_STATE:<br/>            exception_class = InvalidElementStateException<br/>        elif status in ErrorCode.INVALID_SELECTOR \<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR \<br/>                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:<br/>            exception_class = InvalidSelectorException<br/>        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:<br/>            exception_class = ElementNotSelectableException<br/>        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:<br/>            exception_class = ElementNotInteractableException<br/>        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:<br/>            exception_class = InvalidCookieDomainException<br/>        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:<br/>            exception_class = UnableToSetCookieException<br/>        elif status in ErrorCode.TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.SCRIPT_TIMEOUT:<br/>            exception_class = TimeoutException<br/>        elif status in ErrorCode.UNKNOWN_ERROR:<br/>            exception_class = WebDriverException<br/>        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:<br/>            exception_class = UnexpectedAlertPresentException<br/>        elif status in ErrorCode.NO_ALERT_OPEN:<br/>            exception_class = NoAlertPresentException<br/>        elif status in ErrorCode.IME_NOT_AVAILABLE:<br/>            exception_class = ImeNotAvailableException<br/>        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:<br/>            exception_class = ImeActivationFailedException<br/>        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:<br/>            exception_class = MoveTargetOutOfBoundsException<br/>        elif status in ErrorCode.JAVASCRIPT_ERROR:<br/>            exception_class = JavascriptException<br/>        elif status in ErrorCode.SESSION_NOT_CREATED:<br/>            exception_class = SessionNotCreatedException<br/>        elif status in ErrorCode.INVALID_ARGUMENT:<br/>            exception_class = InvalidArgumentException<br/>        elif status in ErrorCode.NO_SUCH_COOKIE:<br/>            exception_class = NoSuchCookieException<br/>        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:<br/>            exception_class = ScreenshotException<br/>        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:<br/>            exception_class = ElementClickInterceptedException<br/>        elif status in ErrorCode.INSECURE_CERTIFICATE:<br/>            exception_class = InsecureCertificateException<br/>        elif status in ErrorCode.INVALID_COORDINATES:<br/>            exception_class = InvalidCoordinatesException<br/>        elif status in ErrorCode.INVALID_SESSION_ID:<br/>            exception_class = InvalidSessionIdException<br/>        elif status in ErrorCode.UNKNOWN_METHOD:<br/>            exception_class = UnknownMethodException<br/>        else:<br/>            exception_class = WebDriverException<br/>        if value == &#x27;&#x27; or value is None:<br/>            value = response[&#x27;value&#x27;]<br/>        if isinstance(value, basestring):<br/>            if exception_class == ErrorInResponseException:<br/>                raise exception_class(response, value)<br/>            raise exception_class(value)<br/>        if message == &quot;&quot; and &#x27;message&#x27; in value:<br/>            message = value[&#x27;message&#x27;]<br/>    <br/>        screen = None<br/>        if &#x27;screen&#x27; in value:<br/>            screen = value[&#x27;screen&#x27;]<br/>    <br/>        stacktrace = None<br/>        if &#x27;stackTrace&#x27; in value and value[&#x27;stackTrace&#x27;]:<br/>            stacktrace = []<br/>            try:<br/>                for frame in value[&#x27;stackTrace&#x27;]:<br/>                    line = self._value_or_default(frame, &#x27;lineNumber&#x27;, &#x27;&#x27;)<br/>                    file = self._value_or_default(frame, &#x27;fileName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if line:<br/>                        file = &quot;%s:%s&quot; % (file, line)<br/>                    meth = self._value_or_default(frame, &#x27;methodName&#x27;, &#x27;&lt;anonymous&gt;&#x27;)<br/>                    if &#x27;className&#x27; in frame:<br/>                        meth = &quot;%s.%s&quot; % (frame[&#x27;className&#x27;], meth)<br/>                    msg = &quot;    at %s (%s)&quot;<br/>                    msg = msg % (meth, file)<br/>                    stacktrace.append(msg)<br/>            except TypeError:<br/>                pass<br/>        if exception_class == ErrorInResponseException:<br/>            raise exception_class(response, message)<br/>        elif exception_class == UnexpectedAlertPresentException:<br/>            alert_text = None<br/>            if &#x27;data&#x27; in value:<br/>                alert_text = value[&#x27;data&#x27;].get(&#x27;text&#x27;)<br/>            elif &#x27;alert&#x27; in value:<br/>                alert_text = value[&#x27;alert&#x27;].get(&#x27;text&#x27;)<br/>            raise exception_class(message, screen, stacktrace, alert_text)<br/>&gt;       raise exception_class(message, screen, stacktrace)<br/><span class="error">E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (921, 1802)</span><br/><span class="error">E         (Session info: chrome=89.0.4389.90)</span><br/><br/>/usr/local/lib/python3.8/dist-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException<br/> ------------------------------Captured stdout call------------------------------ <br/>screenshots/screenshot_04-21_17-37-18.png
+<br/> -----------------------------Captured log teardown------------------------------ <br/>WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f7a874ddb20&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/138c6ccd04b21cba775a6ca6fa23d5a3
+WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f7a873aa040&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/138c6ccd04b21cba775a6ca6fa23d5a3
+WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f7a874b8a90&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/138c6ccd04b21cba775a6ca6fa23d5a3<br/></div></td></tr></tbody>
       <tbody class="passed results-table-row">
         <tr>
           <td class="col-result">Passed</td>
-          <td class="col-name">tests/testing_forgotpassword.py::TesFP::test_ForgetPassword</td>
-          <td class="col-duration">16.86</td>
+          <td class="col-name">tests/testing_MiniCart.py::TesCART::test_ZipCode</td>
+          <td class="col-duration">12.28</td>
           <td class="col-links"></td></tr>
         <tr>
           <td class="extra" colspan="4">
-            <div class="log"> ------------------------------Captured stdout call------------------------------ <br/>Password reset successfully
-Email ID does not exist, please try again with a valid ID&lt;br&gt;
-<br/></div></td></tr></tbody>
-      <tbody class="passed results-table-row">
-        <tr>
-          <td class="col-result">Passed</td>
-          <td class="col-name">tests/testing_forgotpassword.py::TesFP::test_headings</td>
-          <td class="col-duration">0.09</td>
-          <td class="col-links"></td></tr>
-        <tr>
-          <td class="extra" colspan="4">
-            <div class="log"> ------------------------------Captured stdout call------------------------------ <br/>{&#x27;forgot password&#x27;: True, &#x27;why register with us.&#x27;: True}
-<br/></div></td></tr></tbody>
-      <tbody class="passed results-table-row">
-        <tr>
-          <td class="col-result">Passed</td>
-          <td class="col-name">tests/testing_forgotpassword.py::TesFP::test_placeholders</td>
-          <td class="col-duration">0.20</td>
-          <td class="col-links"></td></tr>
-        <tr>
-          <td class="extra" colspan="4">
-            <div class="log"> ------------------------------Captured stdout call------------------------------ <br/>{&#x27;Enter your registered Email Id&#x27;: True}
-<br/> -----------------------------Captured log teardown------------------------------ <br/>WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763a9a0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64
-WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763a640&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64
-WARNING  urllib3.connectionpool:connectionpool.py:744 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by &#x27;NewConnectionError(&#x27;&lt;urllib3.connection.HTTPConnection object at 0x7f339763adf0&gt;: Failed to establish a new connection: [Errno 111] Connection refused&#x27;)&#x27;: /session/2d89693a6362a6ed2f54340e02a06c64<br/></div></td></tr></tbody></table></body></html>
\ No newline at end of file
+            <div class="empty log">No log output captured.</div></td></tr></tbody></table></body></html>
\ No newline at end of file
Index: tests/testing_cart.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from resources import ui_test_class\nimport HtmlTestRunner\nimport unittest\nfrom resources.page_objects.cart import MiniCart\nfrom resources.page_objects.cart import Cart\n# from selenium import webdriver\n\n\n# import time\n\n\nclass TesCART(ui_test_class.UVClass):\n    cart_page: Cart\n    cart_page: MiniCart\n\n    @classmethod\n    def setUpClass(cls):\n        super(TesCART, cls).setUpClass()\n        # cls.driver.implicitly_wait(10)\n\n    @classmethod\n    def tearDownClass(cls):\n        super(TesCART, cls).tearDownClass()\n        cls.driver.quit()\n\n    def setUp(self):\n        super(TesCART, self).setUp()\n        self.base_page.driver.refresh()\n\n    def test_ZipCode(self):\n\n        self.cart_page.zip(\"54000\")\n        self.cart_page.submit_zip()\n\n    def test_click_ProceedCheckOut(self):\n        self.cart_page.click_cart()\n        empty = self.cart_page.get_attribute(MiniCart.empty_cart, 'innerHTML')\n        print(empty)\n        self.cart_page.click_select()\n        self.cart_page.click_AddToCart()\n        CheckOut_button = self.cart_page.get_attribute(MiniCart.proceed_to_checkOut, 'innerHTML')\n        print(CheckOut_button)\n\n    def test_countItemAndPriceOfItem(self):\n\n        self.cart_page.click_cart()\n        ItemNumber = self.cart_page.get_attribute(MiniCart.ItemCount, 'innerHTML')\n        print(ItemNumber)\n        ItemPrice = self.cart_page.get_attribute(MiniCart.PriceOfItem, 'innerHTML')\n        print(ItemPrice)\n\n    def test_imageAndItemQuantity(self):\n\n        self.cart_page.click_cart()\n        imageSource = self.cart_page.get_attribute(MiniCart.image, 'src')\n        print(imageSource)\n        self.cart_page.click_plus()\n        ItemQuantity = self.cart_page.get_attribute(MiniCart.ItemQuantity, 'innerHTML')\n        print(ItemQuantity)\n\n    def test_name_of_itemAndMinOrder(self):\n\n        self.cart_page.click_cart()\n        NameOfItem = self.cart_page.get_attribute(MiniCart.NameOfItem, 'innerHTML')\n        print(NameOfItem)\n        MinimumOrder = self.cart_page.find_element(MiniCart.min_order).get_attribute('innerHTML')\n        print(MinimumOrder)\n        self.cart_page.click_delete()\n\n    # def test_DeleteItem(self):\n    #     # self.cart_page.click_cart()\n    #     self.cart_page.click_delete()\n\n    # def test_PlusQuantity(self):\n    #     self.cart_page.click_cart()\n    #\n    #\n    #     self.cart_page.click_plus()\n\n\nif __name__ == \"__main__\":\n    unittest.main(testRunner=HtmlTestRunner.HTMLTestRunner(output='./reports', report_title='Cart'))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/testing_cart.py b/tests/testing_cart.py
--- a/tests/testing_cart.py	(revision 0359f1f8257d89a1071457f76be0294d40a2faa7)
+++ b/tests/testing_cart.py	(date 1619001559003)
@@ -41,6 +41,7 @@
         CheckOut_button = self.cart_page.get_attribute(MiniCart.proceed_to_checkOut, 'innerHTML')
         print(CheckOut_button)
 
+
     def test_countItemAndPriceOfItem(self):
 
         self.cart_page.click_cart()
